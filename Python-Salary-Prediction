{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"pygments_lexer":"ipython3","nbconvert_exporter":"python","version":"3.6.4","file_extension":".py","codemirror_mode":{"name":"ipython","version":3},"name":"python","mimetype":"text/x-python"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":6088557,"sourceType":"datasetVersion","datasetId":3486505}],"dockerImageVersionId":30527,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/saymoonlee/eda-ml-salary-based-on-country?scriptVersionId=138359221\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2023-07-30T11:38:39.663961Z","iopub.execute_input":"2023-07-30T11:38:39.664662Z","iopub.status.idle":"2023-07-30T11:38:39.705425Z","shell.execute_reply.started":"2023-07-30T11:38:39.664615Z","shell.execute_reply":"2023-07-30T11:38:39.70413Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df = pd.read_csv('../input/salary-dataset-based-on-country-and-race/Salary_Data_Based_country_and_race.csv')\nprint('First 10 rows of dataset:\\n') \ndf.head()\n","metadata":{"execution":{"iopub.status.busy":"2023-07-30T11:38:39.707617Z","iopub.execute_input":"2023-07-30T11:38:39.70795Z","iopub.status.idle":"2023-07-30T11:38:39.770492Z","shell.execute_reply.started":"2023-07-30T11:38:39.707921Z","shell.execute_reply":"2023-07-30T11:38:39.769437Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print('Shape of the dataset:', df.shape)","metadata":{"execution":{"iopub.status.busy":"2023-07-30T11:38:39.7717Z","iopub.execute_input":"2023-07-30T11:38:39.772096Z","iopub.status.idle":"2023-07-30T11:38:39.77725Z","shell.execute_reply.started":"2023-07-30T11:38:39.772066Z","shell.execute_reply":"2023-07-30T11:38:39.776305Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Remove unwanted columns\ndf = df.drop(['Unnamed: 0'], axis=1)","metadata":{"execution":{"iopub.status.busy":"2023-07-30T11:38:39.780437Z","iopub.execute_input":"2023-07-30T11:38:39.781175Z","iopub.status.idle":"2023-07-30T11:38:39.796299Z","shell.execute_reply.started":"2023-07-30T11:38:39.781144Z","shell.execute_reply":"2023-07-30T11:38:39.795282Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.info()","metadata":{"execution":{"iopub.status.busy":"2023-07-30T11:38:39.797842Z","iopub.execute_input":"2023-07-30T11:38:39.798187Z","iopub.status.idle":"2023-07-30T11:38:39.83683Z","shell.execute_reply.started":"2023-07-30T11:38:39.79816Z","shell.execute_reply":"2023-07-30T11:38:39.835524Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Based on the outcome above, there are NULL data. \n# As the number of records that contained NULL data is minimum, we will just remove the rows.\ndf = df.dropna()","metadata":{"execution":{"iopub.status.busy":"2023-07-30T11:38:39.838175Z","iopub.execute_input":"2023-07-30T11:38:39.838499Z","iopub.status.idle":"2023-07-30T11:38:39.86179Z","shell.execute_reply.started":"2023-07-30T11:38:39.838469Z","shell.execute_reply":"2023-07-30T11:38:39.860574Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.info()","metadata":{"execution":{"iopub.status.busy":"2023-07-30T11:38:39.863864Z","iopub.execute_input":"2023-07-30T11:38:39.864383Z","iopub.status.idle":"2023-07-30T11:38:39.892859Z","shell.execute_reply.started":"2023-07-30T11:38:39.864306Z","shell.execute_reply":"2023-07-30T11:38:39.891624Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Now all the data is clean (from null or nan data), let's see some information on continuous data\ndf.describe()","metadata":{"execution":{"iopub.status.busy":"2023-07-30T11:38:39.894094Z","iopub.execute_input":"2023-07-30T11:38:39.894458Z","iopub.status.idle":"2023-07-30T11:38:39.92795Z","shell.execute_reply.started":"2023-07-30T11:38:39.894427Z","shell.execute_reply":"2023-07-30T11:38:39.926863Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Let's look at category data... first we would like to know each column, how many unique values that we have\n# Detect if is categorical data, count the number of unqiue value.\nfor col in df.columns:\n    if df[col].dtype == 'object':\n        unique_count = df[col].nunique()\n        print(f'{col}: {unique_count}')","metadata":{"execution":{"iopub.status.busy":"2023-07-30T11:38:39.929526Z","iopub.execute_input":"2023-07-30T11:38:39.929903Z","iopub.status.idle":"2023-07-30T11:38:39.940521Z","shell.execute_reply.started":"2023-07-30T11:38:39.929871Z","shell.execute_reply":"2023-07-30T11:38:39.939383Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Explore the categorical data, if there is any typo error\nfor col in df.columns:\n    if df[col].dtype == 'object':\n        print(f'{col}: {unique_count}')\n        print(df[col].unique())","metadata":{"execution":{"iopub.status.busy":"2023-07-30T11:38:39.945632Z","iopub.execute_input":"2023-07-30T11:38:39.945989Z","iopub.status.idle":"2023-07-30T11:38:39.960429Z","shell.execute_reply.started":"2023-07-30T11:38:39.945958Z","shell.execute_reply":"2023-07-30T11:38:39.95907Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Based on data above, some of the data in \"education level\" column should be cleaned up Education Level: 10\n#\"Bachelor's\" \"Master's\" 'PhD' \"Bachelor's Degree\" \"Master's Degree\",'High School' 'phD'\n# PhD & phD = PhD\n# Bachelor's & Bachelor's Degree = Bachelor's\n# Master's & Master's Degree = Master's\n\ndf['Education Level'] = df['Education Level'].replace('phD', 'PhD')\ndf['Education Level'] = df['Education Level'].replace('Bachelor\\'s Degree', 'Bachelor\\'s')\ndf['Education Level'] = df['Education Level'].replace('Master\\'s Degree', 'Master\\'s')","metadata":{"execution":{"iopub.status.busy":"2023-07-30T11:38:39.962297Z","iopub.execute_input":"2023-07-30T11:38:39.962787Z","iopub.status.idle":"2023-07-30T11:38:39.974151Z","shell.execute_reply.started":"2023-07-30T11:38:39.962753Z","shell.execute_reply":"2023-07-30T11:38:39.97308Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Check the column again\ndf['Education Level'].unique()","metadata":{"execution":{"iopub.status.busy":"2023-07-30T11:38:39.975537Z","iopub.execute_input":"2023-07-30T11:38:39.976221Z","iopub.status.idle":"2023-07-30T11:38:39.991531Z","shell.execute_reply.started":"2023-07-30T11:38:39.976175Z","shell.execute_reply":"2023-07-30T11:38:39.990456Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Let's have some understanding on different features to salary\n# we will use plotly here\nimport plotly.express as px\n\nfig = px.box(data_frame=df, x='Gender', y='Salary')\nfig.show()","metadata":{"execution":{"iopub.status.busy":"2023-07-30T11:38:39.9932Z","iopub.execute_input":"2023-07-30T11:38:39.993624Z","iopub.status.idle":"2023-07-30T11:38:42.873462Z","shell.execute_reply.started":"2023-07-30T11:38:39.993595Z","shell.execute_reply":"2023-07-30T11:38:42.872653Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"raw","source":"There is no huge differences of salary range between 3 genders, However, femala has sligtly lower salary range among all.","metadata":{}},{"cell_type":"code","source":"fig = px.box(data_frame=df, x='Education Level', y='Salary')\nfig.show()","metadata":{"execution":{"iopub.status.busy":"2023-07-30T11:38:42.874461Z","iopub.execute_input":"2023-07-30T11:38:42.874758Z","iopub.status.idle":"2023-07-30T11:38:42.975095Z","shell.execute_reply.started":"2023-07-30T11:38:42.874731Z","shell.execute_reply":"2023-07-30T11:38:42.97372Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Obviously, education level is one of the major factors in deciding the salary position of a person. PhD has highest salary range, followed by Master's and Bachelor's. Those people with high school qualification has lowest salary range.","metadata":{}},{"cell_type":"code","source":"fig = px.box(data_frame=df, x='Job Title', y='Salary')\nfig.show()","metadata":{"execution":{"iopub.status.busy":"2023-07-30T11:38:42.976587Z","iopub.execute_input":"2023-07-30T11:38:42.976961Z","iopub.status.idle":"2023-07-30T11:38:43.104067Z","shell.execute_reply.started":"2023-07-30T11:38:42.976928Z","shell.execute_reply":"2023-07-30T11:38:43.102773Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"There are too may job titles for this feature, and sample size for some of the job titile is too little (only has 1 or 2 data). \n\nThe proposal is to futher categorize the data into different industry or job level (such as junior executive, senior executive, manager, senior manager, director) during data collection will be more benifitial for analysis.","metadata":{}},{"cell_type":"code","source":"fig = px.box(data_frame=df, x='Country', y='Salary')\nfig.show()","metadata":{"execution":{"iopub.status.busy":"2023-07-30T11:38:43.10576Z","iopub.execute_input":"2023-07-30T11:38:43.106212Z","iopub.status.idle":"2023-07-30T11:38:43.214984Z","shell.execute_reply.started":"2023-07-30T11:38:43.10617Z","shell.execute_reply":"2023-07-30T11:38:43.213818Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"There is no huge differences in salary range for different countries.","metadata":{}},{"cell_type":"code","source":"fig = px.box(data_frame=df, x='Race', y='Salary')\nfig.show()","metadata":{"execution":{"iopub.status.busy":"2023-07-30T11:38:43.21649Z","iopub.execute_input":"2023-07-30T11:38:43.217366Z","iopub.status.idle":"2023-07-30T11:38:43.307862Z","shell.execute_reply.started":"2023-07-30T11:38:43.21732Z","shell.execute_reply":"2023-07-30T11:38:43.306736Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"The salary range are different between difference races, but the range still between Q1:60k to Q3:160k.","metadata":{}},{"cell_type":"code","source":"df.head()","metadata":{"execution":{"iopub.status.busy":"2023-07-30T11:38:43.309701Z","iopub.execute_input":"2023-07-30T11:38:43.310111Z","iopub.status.idle":"2023-07-30T11:38:43.329077Z","shell.execute_reply.started":"2023-07-30T11:38:43.310076Z","shell.execute_reply":"2023-07-30T11:38:43.328126Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import seaborn as sns\nsns.pairplot(df.select_dtypes(include=['float64', 'int64']), diag_kind='scatter', vars=None)","metadata":{"execution":{"iopub.status.busy":"2023-07-30T11:38:43.330649Z","iopub.execute_input":"2023-07-30T11:38:43.332391Z","iopub.status.idle":"2023-07-30T11:38:47.874985Z","shell.execute_reply.started":"2023-07-30T11:38:43.332303Z","shell.execute_reply":"2023-07-30T11:38:47.873606Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"We see the direct correlation betwen years of experience / age against salary. Obviously, these are two important features. Let'see the correlation among all these variables.","metadata":{}},{"cell_type":"code","source":"import matplotlib.pyplot as plt\ncorrelation_matrix = df[['Years of Experience', 'Age', 'Salary']].corr()\nplt.figure(figsize=(8, 6))\nsns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', center=0)\nplt.title('Correlation Matrix for Years of Experience, Age, and Salary')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2023-07-30T11:38:47.876671Z","iopub.execute_input":"2023-07-30T11:38:47.877627Z","iopub.status.idle":"2023-07-30T11:38:48.230263Z","shell.execute_reply.started":"2023-07-30T11:38:47.877578Z","shell.execute_reply":"2023-07-30T11:38:48.229127Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"We will use 3 features for this machine learning, running multiple linear regression, including age, years of experience, educational level.","metadata":{}},{"cell_type":"markdown","source":"## Data Preprocessing","metadata":{}},{"cell_type":"code","source":"from sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import r2_score\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import OrdinalEncoder\n\nx = df[['Years of Experience', 'Age', 'Education Level']]\ny = df['Salary']\n\nx.head()","metadata":{"execution":{"iopub.status.busy":"2023-07-30T11:38:48.231916Z","iopub.execute_input":"2023-07-30T11:38:48.232306Z","iopub.status.idle":"2023-07-30T11:38:48.515473Z","shell.execute_reply.started":"2023-07-30T11:38:48.232275Z","shell.execute_reply":"2023-07-30T11:38:48.514301Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Define the order of education level \norder_education_level = ['High School', 'Bachelor\\'s', 'Master\\'s', 'PhD']\n\n\n# Define the Column Transformer\npreprocessor = ColumnTransformer(\n    transformers=[\n        ('num', StandardScaler(),['Years of Experience','Age']),  \n        ('ord', OrdinalEncoder(categories=[order_education_level]),['Education Level'])\n    ])\n\n# Get the feature names\nfeature_names = x.columns\n\n# Fit and transform the data\nx_preprocessed = preprocessor.fit_transform(x)\n\nx2 = pd.DataFrame(x_preprocessed, columns=feature_names)\nx2.head()","metadata":{"execution":{"iopub.status.busy":"2023-07-30T11:38:48.516911Z","iopub.execute_input":"2023-07-30T11:38:48.517296Z","iopub.status.idle":"2023-07-30T11:38:48.545356Z","shell.execute_reply.started":"2023-07-30T11:38:48.517263Z","shell.execute_reply":"2023-07-30T11:38:48.544155Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Multiple Linear Regression","metadata":{}},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x2, y, test_size = 0.2, random_state=0)\nreg = LinearRegression()\nreg.fit(x_train, y_train)\n\ny_pred = reg.predict(x_test)\nr2_mlr = r2_score(y_test, y_pred)\n\nprint('r2 score is:', r2_mlr)","metadata":{"execution":{"iopub.status.busy":"2023-07-30T11:52:28.928656Z","iopub.execute_input":"2023-07-30T11:52:28.929163Z","iopub.status.idle":"2023-07-30T11:52:28.94792Z","shell.execute_reply.started":"2023-07-30T11:52:28.929127Z","shell.execute_reply":"2023-07-30T11:52:28.946522Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# plot the graph between y_predict and y_test\nsns.scatterplot(x=y_test, y=y_pred, alpha=0.6)\nplt.xlabel('Actual Salary')\nplt.ylabel('Predicted Salary')\nplt.title('Actual vs Predict Salary(MLR)')\nplt.legend()\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2023-07-30T11:38:48.5845Z","iopub.execute_input":"2023-07-30T11:38:48.585141Z","iopub.status.idle":"2023-07-30T11:38:48.91682Z","shell.execute_reply.started":"2023-07-30T11:38:48.585077Z","shell.execute_reply":"2023-07-30T11:38:48.915724Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## SVR Model","metadata":{}},{"cell_type":"code","source":"from sklearn.svm import SVR\nsvr_rbf = SVR(kernel='rbf', C=1e3, gamma=0.1)\nsvr_rbf.fit(x_train,y_train)\ny_pred = svr_rbf.predict(x_test)\nr2_svr = r2_score(y_test, y_pred)\n\nprint('r2 score is:', r2_svr)","metadata":{"execution":{"iopub.status.busy":"2023-07-30T11:52:44.347865Z","iopub.execute_input":"2023-07-30T11:52:44.349081Z","iopub.status.idle":"2023-07-30T11:52:46.140849Z","shell.execute_reply.started":"2023-07-30T11:52:44.349Z","shell.execute_reply":"2023-07-30T11:52:46.139659Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# plot the graph between y_predict and y_test\nsns.scatterplot(x=y_test, y=y_pred, alpha=0.6)\nplt.xlabel('Actual Salary')\nplt.ylabel('Predicted Salary')\nplt.title('Actual vs Predict Salary (SVR)')\nplt.legend()\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2023-07-30T11:52:48.1806Z","iopub.execute_input":"2023-07-30T11:52:48.181073Z","iopub.status.idle":"2023-07-30T11:52:48.533292Z","shell.execute_reply.started":"2023-07-30T11:52:48.181022Z","shell.execute_reply":"2023-07-30T11:52:48.53213Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Random Forest Regression","metadata":{}},{"cell_type":"code","source":"from sklearn.ensemble import RandomForestRegressor\nrf_reg = RandomForestRegressor(n_estimators=100, random_state=0)\nrf_reg.fit(x_train, y_train)\ny_pred = rf_reg.predict(x_test)\nr2_rfr = r2_score(y_test, y_pred)\n\nprint('r2 score is:', r2_rfr)","metadata":{"execution":{"iopub.status.busy":"2023-07-30T11:53:00.360875Z","iopub.execute_input":"2023-07-30T11:53:00.361926Z","iopub.status.idle":"2023-07-30T11:53:00.841325Z","shell.execute_reply.started":"2023-07-30T11:53:00.361886Z","shell.execute_reply":"2023-07-30T11:53:00.840145Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# plot the graph between y_predict and y_test\nsns.scatterplot(x=y_test, y=y_pred, alpha=0.6)\nplt.xlabel('Actual Salary')\nplt.ylabel('Predicted Salary')\nplt.title('Actual vs Predict Salary (Random Forest Regressor)')\nplt.legend()\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2023-07-30T11:44:05.472713Z","iopub.execute_input":"2023-07-30T11:44:05.47318Z","iopub.status.idle":"2023-07-30T11:44:05.795856Z","shell.execute_reply.started":"2023-07-30T11:44:05.473143Z","shell.execute_reply":"2023-07-30T11:44:05.794615Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Report","metadata":{}},{"cell_type":"code","source":"Report = {'Model' : ['Multiple Linear Regression', 'Support Vector Regression', 'Random Forest Regression'],\n         'R2 Score' : [r2_mlr, r2_svr, r2_rfr]}\ndf_report = pd.DataFrame(Report)\ndisplay(df_report)","metadata":{"execution":{"iopub.status.busy":"2023-07-30T11:56:34.467038Z","iopub.execute_input":"2023-07-30T11:56:34.467579Z","iopub.status.idle":"2023-07-30T11:56:34.487831Z","shell.execute_reply.started":"2023-07-30T11:56:34.467535Z","shell.execute_reply":"2023-07-30T11:56:34.486481Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Random Forest Regressor has highest R2 score compare to Multiple Linear Regression and Support Vector Regression.","metadata":{}},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}